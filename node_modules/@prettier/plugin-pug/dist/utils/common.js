"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.detectFramework = exports.detectDangerousQuoteCombination = exports.makeString = exports.handleBracketSpacing = exports.isMultilineInterpolation = exports.isQuoted = exports.isWrappedWith = exports.isStyleAttribute = exports.unwrapLineFeeds = exports.previousNormalAttributeToken = exports.previousTagToken = void 0;
function previousTagToken(tokens, index) {
    for (let i = index - 1; i >= 0; i--) {
        const token = tokens[i];
        if (!token) {
            return;
        }
        if (token.type === 'tag') {
            return token;
        }
    }
    return;
}
exports.previousTagToken = previousTagToken;
function previousNormalAttributeToken(tokens, index) {
    for (let i = index - 1; i > 0; i--) {
        const token = tokens[i];
        if (!token || token.type === 'start-attributes') {
            return;
        }
        if (token.type === 'attribute') {
            if (token.name !== 'class' && token.name !== 'id') {
                return token;
            }
        }
    }
    return;
}
exports.previousNormalAttributeToken = previousNormalAttributeToken;
function unwrapLineFeeds(value) {
    return value.includes('\n')
        ? value
            .split('\n')
            .map((part) => part.trim())
            .map((part) => (part[0] === '.' ? '' : ' ') + part)
            .join('')
            .trim()
        : value;
}
exports.unwrapLineFeeds = unwrapLineFeeds;
function isStyleAttribute(name, val) {
    return name === 'style' && isQuoted(val);
}
exports.isStyleAttribute = isStyleAttribute;
function isWrappedWith(val, start, end, offset = 0) {
    return val.startsWith(start, offset) && val.endsWith(end, val.length - offset);
}
exports.isWrappedWith = isWrappedWith;
function isQuoted(val) {
    if (/^(["'])(.*)\1$/.test(val)) {
        const regex = new RegExp(`${val[0]}(?<!\\\\${val[0]})`);
        return !regex.test(val.slice(1, -1));
    }
    return false;
}
exports.isQuoted = isQuoted;
function isMultilineInterpolation(val) {
    return /^`[\s\S]*`$/m.test(val) && val.includes('\n');
}
exports.isMultilineInterpolation = isMultilineInterpolation;
function handleBracketSpacing(bracketSpacing, code, [opening, closing] = ['{{', '}}']) {
    return bracketSpacing ? `${opening} ${code} ${closing}` : `${opening}${code}${closing}`;
}
exports.handleBracketSpacing = handleBracketSpacing;
function makeString(rawContent, enclosingQuote, unescapeUnnecessaryEscapes = false) {
    const otherQuote = enclosingQuote === '"' ? "'" : '"';
    const newContent = rawContent.replace(/\\([\s\S])|(['"])/g, (match, escaped, quote) => {
        if (escaped === otherQuote) {
            return escaped;
        }
        if (quote === enclosingQuote) {
            return `\\${quote}`;
        }
        if (quote) {
            return quote;
        }
        return unescapeUnnecessaryEscapes && /^[^\\nrvtbfux\r\n\u2028\u2029"'0-7]$/.test(escaped)
            ? escaped
            : `\\${escaped}`;
    });
    return enclosingQuote + newContent + enclosingQuote;
}
exports.makeString = makeString;
function detectDangerousQuoteCombination(code, quotes, otherQuotes, logger) {
    const q1 = code.indexOf(quotes);
    const q2 = code.indexOf(otherQuotes);
    const qb = code.indexOf('`');
    if (q1 >= 0 && q2 >= 0 && q2 > q1 && (qb < 0 || q1 < qb)) {
        logger.log({ code, quotes, otherQuotes, q1, q2, qb });
        return true;
    }
    return false;
}
exports.detectDangerousQuoteCombination = detectDangerousQuoteCombination;
function detectFramework() {
    try {
        const npmPackages = Object.keys(process.env)
            .filter((key) => key.startsWith('npm_package_'))
            .filter((key) => /(dev)?[Dd]ependencies_+/.test(key));
        if (npmPackages.some((pack) => pack.includes('vue') && !pack.includes('vuepress'))) {
            return 'vue';
        }
        else if (npmPackages.some((pack) => pack.includes('svelte'))) {
            return 'svelte';
        }
        else if (npmPackages.some((pack) => pack.includes('angular'))) {
            return 'angular';
        }
    }
    catch (_a) {
        return 'auto';
    }
    return 'auto';
}
exports.detectFramework = detectFramework;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3V0aWxzL2NvbW1vbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFXQSxTQUFnQixnQkFBZ0IsQ0FBQyxNQUE0QixFQUFFLEtBQWE7SUFDM0UsS0FBSyxJQUFJLENBQUMsR0FBVyxLQUFLLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDNUMsTUFBTSxLQUFLLEdBQXNCLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMzQyxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ1gsT0FBTztTQUNQO1FBQ0QsSUFBSSxLQUFLLENBQUMsSUFBSSxLQUFLLEtBQUssRUFBRTtZQUN6QixPQUFPLEtBQUssQ0FBQztTQUNiO0tBQ0Q7SUFDRCxPQUFPO0FBQ1IsQ0FBQztBQVhELDRDQVdDO0FBU0QsU0FBZ0IsNEJBQTRCLENBQUMsTUFBNEIsRUFBRSxLQUFhO0lBQ3ZGLEtBQUssSUFBSSxDQUFDLEdBQVcsS0FBSyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQzNDLE1BQU0sS0FBSyxHQUFzQixNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDM0MsSUFBSSxDQUFDLEtBQUssSUFBSSxLQUFLLENBQUMsSUFBSSxLQUFLLGtCQUFrQixFQUFFO1lBQ2hELE9BQU87U0FDUDtRQUNELElBQUksS0FBSyxDQUFDLElBQUksS0FBSyxXQUFXLEVBQUU7WUFDL0IsSUFBSSxLQUFLLENBQUMsSUFBSSxLQUFLLE9BQU8sSUFBSSxLQUFLLENBQUMsSUFBSSxLQUFLLElBQUksRUFBRTtnQkFDbEQsT0FBTyxLQUFLLENBQUM7YUFDYjtTQUNEO0tBQ0Q7SUFDRCxPQUFPO0FBQ1IsQ0FBQztBQWJELG9FQWFDO0FBUUQsU0FBZ0IsZUFBZSxDQUFDLEtBQWE7SUFDNUMsT0FBTyxLQUFLLENBQUMsUUFBUSxDQUFD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